openapi: 3.0.1
info:
  title: Hanger Project
  description: Spicy API
  version: 1.0.0
servers:
  - url: 'https://immense-anchorage-52068.herokuapp.com/'

paths:
  /app/hangers:
    get:
      summary: Returns a list of all RFIDs present in the database and their assosciated temperature.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfHangers'
        '4XX':
          $ref: '#/components/responses/UserError'
        '5XX':
          $ref: '#/components/responses/ServerError'


    post:
      summary: Register a new piece of clothing with an RFID tag.
      requestBody:
        description: JSON Object specifying the piece of clothing.
        required: true
        content:
          applicatoin/json:
            schema:
              $ref: '#/components/schemas/Hanger'
      responses:
        '200':
          description: Returns the same JSON object in case of success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hanger'
        '4XX':
          $ref: '#/components/responses/UserError'
        '5XX':
          $ref: '#/components/responses/ServerError'


  /app/hangers/{id}:
    delete:
      summary: Delete a piece of clothing from the database.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfull deletion of one clothing item.
        '4XX':
          $ref: '#/components/responses/UserError'
        '5XX':
          $ref: '#/components/responses/ServerError'




  /app/recommendations:
    get:
      summary: Returns a list of RFIDs of recommended clothes.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of recommended RFIDs
                items:
                  type: string
                example:
                  - 'bb963d5c-3262-11ec-8d3d-0242ac130003'
                  - '7c193550-3265-11ec-8d3d-0242ac130003'
                  - 'e1a4d4f0-9e1a-4d51-883b-6249a8bcafe8'
        '4XX':
          $ref: '#/components/responses/UserError'
        '5XX':
          $ref: '#/components/responses/ServerError'


  /app/sensor_data:
   post:
     summary: Submit sesnsor data for storage in the database.
     requestBody:
       description: Sensor Data
       required: true
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/SensorPoint'
     responses:
       '200':
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/SensorPoint'
         description: OK
       '4XX':
         $ref: '#/components/responses/UserError'
       '5XX':
         $ref: '#/components/responses/ServerError'



  /app/status:
    get:
      summary: Check whether the user has began the clothing selection process
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '4XX':
          $ref: '#/components/responses/UserError'
        '5XX':
          $ref: '#/components/responses/ServerError'


    patch:
      summary: Sets a boolean value that will indicate whether the clothing selecltion process is ongoing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        '200':
          description: OK
        '4XX':
          $ref: '#/components/responses/UserError'
        '5XX':
          $ref: '#/components/responses/ServerError'

  /app/calendar:
    get:
      summary: Retrieve a list of all scheduled activities
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarEntry'
    post:
      summary: Submit a new activity to the database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarEntry'
      responses:
        '200':
          description: Returns the submitted JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarEntry'
        '4XX':
          $ref: '#/components/responses/UserError'
        '5XX':
          $ref: '#/components/responses/ServerError'

components:
  responses:

    ServerError:
      description: Server error

    UserError:
      description: User error


  schemas:

    CalendarEntry:
      type: object
      properties:
        location_name:
          description: Maximum 100 characters long.
          type: string
        description:
          type: string
        date_time:
          description: The date-time should be specified in the format defined by ISO8601. Also specified in RFC 3339, section 5.6.
          type: string
          format: date-time
        latitude:
          description: Maximum 20 digits of which maximum 15 can be decimal places.
          type: number
        longitude:
          description: Maximum 20 digits of which maximum 15 can be decimal places.
      example:
        location_name: 'Cinema, Enschede'
        description: 'Some movie'
        date-time: '2017-07-21T17:32:28Z'
        latitude: 46.45265
        longitude: 153.11516


    Status:
      type: object
      properties:
          status:
            type: boolean

    SensorPoint:
      type: object
      properties:
        bssid:
          type: string
          description: BSSID/MAC address of the AP. Must be 17 characters long.
        external_temperature:
          description: The temperature value must consist of maximum 10 digits, of which maximum 3 can be decimal places.
          type: number
        body_temperature:
          description: The temperature value must consist of maximum 10 digits, of which maximum 3 can be decimal places.
          type: number
        latitude:
          description: Maximum 20 digits of which maximum 15 can be decimal places.
          type: number
        longitude:
          description: Maximum 20 digits of which maximum 15 can be decimal places.
          type: number
      example:
        external_temperature: 17.0
        body_temperature: 36.0
        latitude: 46.45265
        longitude: 153.11516
        bssid: 'F9:AC:3A:7E:45:1E'

    Hanger:
      type: object
      properties:
        rfid:
          description: The RFID/UUID must be 36 characters long.
          type: string
        temperature:
          description: The temperature value must consist of maximum 10 digits, of which maximum 3 can be decimal places.
          type: number
        type:
          description: String of maximum length 40.
          type: string
      example:
        rfid: '123e4567-e89b-12d3-a456-426614174000'
        temperature: 26.0
        type: 't-shirt'

    ArrayOfHangers:
      type: array
      items:
        $ref: '#/components/schemas/Hanger'
      example:
        - rfid: '123e4567-e89b-12d3-a456-426614174000'
          temperature: 10.0
          type: 'sweater'
        - rfid: '689dfa28-3018-11ec-8d3d-0242ac130003'
          temperature: 20.0
          type: 'jeans'




